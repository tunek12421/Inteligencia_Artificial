# ==============================================
# ANÁLISIS FINAL DE RESULTADOS COMPARATIVO
# ==============================================

print("ANÁLISIS FINAL DE RESULTADOS COMPARATIVO")
print()
print("EJERCICIO 4: REGRESIÓN LOGÍSTICA - TITANIC")
print()
print("¿Qué variables influyeron más en el modelo?")
print("El sexo fue lo más importante otra vez. Los hombres tenían menos chances de sobrevivir. La clase social también importó bastante, igual que en el árbol de decisión. El precio del boleto y la edad tuvieron impacto moderado. Básicamente las mismas variables que el decision tree pero con pesos diferentes.")
print()
print("¿Qué métricas fueron mejores y por qué?")
print("Tuvo 86.5% de precisión, un poco mejor que el árbol de decisión que sacó 85%. Pero tuvo problemas de convergencia, se ve que necesitaba más iteraciones. El recall para supervivientes fue bajo (61%) igual que el árbol. Parece que ambos modelos son pesimistas.")
print()
print("¿Cómo mejorarías este modelo para un caso real?")
print("Aumentaría las iteraciones a 1000 para que converja bien. Escalaría los datos porque Fare tiene valores muy diferentes a Age. Probaría regularización L1 o L2. También haría las mismas mejoras que mencioné para el árbol: crear variables de familia y extraer títulos de nombres.")
print()
print("EJERCICIO 5: NAIVE BAYES - FAKE NEWS")
print()
print("¿Qué variables influyeron más en el modelo?")
print("No puedo ver las palabras específicas como en Random Forest, pero Naive Bayes funciona bien con texto porque asume que las palabras son independientes. Seguramente las mismas palabras institucionales como reuters, said, washington fueron importantes para detectar noticias reales.")
print()
print("¿Qué métricas fueron mejores y por qué?")
print("Sacó 93% de precisión, que está súper bien pero no tan perfecto como Random Forest (100%). Naive Bayes es más simple y funciona excelente con texto. Las métricas estaban balanceadas, precision y recall similares para ambas clases. Es rápido de entrenar.")
print()
print("¿Cómo mejorarías este modelo para un caso real?")
print("Probaría diferentes valores de alpha para el suavizado. Combinaría con otros modelos en un ensemble. Usaría más features de TF-IDF. También procesaría mejor el texto limpiando URLs y caracteres especiales. Naive Bayes es bueno pero Random Forest le ganó claramente.")
print()
print("EJERCICIO 6: ANÁLISIS EXPLORATORIO - NETFLIX")
print()
print("¿Qué variables influyeron más en el análisis?")
print("El país de origen es clave, Estados Unidos domina completamente. El año de adición muestra la estrategia de Netflix. Los géneros revelan preferencias globales. La duración tiene patrones claros. Los directores top muestran concentración de contenido.")
print()
print("¿Qué insights fueron mejores y por qué?")
print("Ver que India está segundo en producciones muestra la expansión global de Netflix. El pico en 2019 coincide con la guerra del streaming. Los International Movies como género top confirma la estrategia global. La duración promedio de 100 minutos es consistente con estándares de la industria.")
print()
print("¿Cómo mejorarías este análisis para un caso real?")
print("Agregaría análisis predictivo para estimar qué contenido va a ser popular. Haría clustering de películas similares. Analizaría las descripciones con NLP para extraer temas. Mediaría ratings y reviews para predecir éxito. Haría análisis de redes entre actores y directores.")
print()
print("COMPARACIÓN ENTRE ENFOQUES BÁSICOS Y AVANZADOS")
print()
print("Los modelos avanzados no siempre fueron mejores:")
print("Random Forest (100%) destrozó a Naive Bayes (93%) en fake news. Pero Decision Tree (85%) fue ligeramente peor que Regresión Logística (86.5%) en Titanic. Los ensemble methods como Random Forest son superiores cuando hay suficientes datos. Con datasets chicos como Titanic, los modelos simples compiten bien.")
print()
print("Random Forest funcionó perfecto porque tenía 44,898 noticias para entrenar. Decision Tree con solo 1,309 pasajeros se sobreajustó un poco. El tamaño del dataset importa mucho más de lo que pensaba.")
print()
print("Para producción real usaría Random Forest para texto y Regresión Logística para datos tabulares pequeños. Isolation Forest es perfecto para anomalías. Cada algoritmo tiene su lugar dependiendo del problema y los datos disponibles.")